#!/bin/bash

# Script de configura√ß√£o FINAL para Open Web UI + Ollama + SearxNG
# Para Linux Mint / Ubuntu - Vers√£o Completa

set -e

echo "üöÄ Configurando ambiente completo: Open Web UI + Ollama + SearxNG"
echo "=================================================================="

# Verificar se o Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Instalando Docker..."
    
    # Atualizar sistema
    sudo apt update
    
    # Instalar depend√™ncias
    sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release openssl
    
    # Adicionar chave GPG do Docker
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
    # Adicionar reposit√≥rio do Docker
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # Instalar Docker
    sudo apt update
    sudo apt install -y docker-ce docker-ce-cli containerd.io
    
    # Adicionar usu√°rio ao grupo docker
    sudo usermod -aG docker $USER
    
    echo "‚úÖ Docker instalado com sucesso!"
    echo "‚ö†Ô∏è  Voc√™ precisa fazer logout e login novamente para usar o Docker sem sudo"
fi

# Verificar se o Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n√£o encontrado. Instalando..."
    
    # Baixar Docker Compose
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    
    # Dar permiss√£o de execu√ß√£o
    sudo chmod +x /usr/local/bin/docker-compose
    
    echo "‚úÖ Docker Compose instalado com sucesso!"
fi

# Verificar depend√™ncias adicionais
echo "üì¶ Verificando depend√™ncias..."
sudo apt install -y openssl curl wget netstat-nat || true

# Criar diret√≥rios necess√°rios
echo "üìÅ Criando estrutura de diret√≥rios..."
mkdir -p data/ollama
mkdir -p data/webui
mkdir -p data/redis
mkdir -p searxng
mkdir -p backups

# Definir permiss√µes corretas
sudo chown -R $USER:$USER data/ 2>/dev/null || true

# Gerar chaves secretas aleat√≥rias
echo "üîë Gerando chaves secretas..."
WEBUI_SECRET=$(openssl rand -hex 32)
SEARXNG_SECRET=$(openssl rand -hex 32)

# Criar arquivo .env se n√£o existir ou atualizar chaves
if [ ! -f .env ]; then
    echo "üìù Criando arquivo .env..."
    cp .env.example .env
fi

# Atualizar as chaves secretas no arquivo .env
sed -i "s/WEBUI_SECRET_KEY=.*/WEBUI_SECRET_KEY=${WEBUI_SECRET}/" .env
sed -i "s/SEARXNG_SECRET=.*/SEARXNG_SECRET=${SEARXNG_SECRET}/" .env

echo "‚úÖ Chaves secretas atualizadas no .env"

# Criar configura√ß√£o otimizada do SearxNG
echo "‚öôÔ∏è  Criando configura√ß√£o otimizada do SearxNG..."

cat > searxng/settings.yml << EOF
# Configura√ß√£o otimizada do SearxNG para AutomaLLama
use_default_settings: true

general:
  debug: false
  instance_name: "AutomaLLama Search"
  privacypolicy_url: false
  donation_url: false
  contact_url: false
  enable_metrics: false

search:
  safe_search: 0
  autocomplete: "google"
  autocomplete_min: 2
  default_lang: "pt-BR"
  ban_time_on_fail: 5
  max_ban_time_on_fail: 120
  suspended_times:
    - 86400    # 1 dia
    - 259200   # 3 dias
    - 604800   # 7 dias
    - 2592000  # 30 dias
  formats:
    - html
    - json

server:
  port: 8080
  bind_address: "0.0.0.0"
  secret_key: "${SEARXNG_SECRET}"
  base_url: false
  image_proxy: true
  http_protocol_version: "1.1"
  method: "POST"
  default_http_headers:
    X-Content-Type-Options: nosniff
    X-XSS-Protection: 1; mode=block
    X-Download-Options: noopen
    X-Robots-Tag: noindex, nofollow
    Referrer-Policy: no-referrer

redis:
  url: redis://redis:6379/0

ui:
  static_use_hash: false
  default_locale: "pt-BR"
  query_in_title: true
  infinite_scroll: false
  center_alignment: false
  cache_url: true
  search_on_category_select: true
  hotkeys: default
  theme_args:
    simple_style: auto

# Configura√ß√µes essenciais de mecanismos de busca
engines:
  # Busca geral - principais
  - name: google
    engine: google
    shortcut: g
    use_mobile_ui: false
    disabled: false
    
  - name: bing
    engine: bing
    shortcut: b
    disabled: false
    
  - name: duckduckgo
    engine: duckduckgo
    no_cache: true
    shortcut: ddg
    disabled: false
    
  - name: startpage
    engine: startpage
    shortcut: sp
    timeout: 6.0
    disabled: false
    
  # Imagens
  - name: google images
    engine: google_images
    shortcut: goi
    disabled: false
    
  # Not√≠cias
  - name: google news
    engine: google_news
    shortcut: gon
    disabled: false
    
  # Conhecimento
  - name: wikipedia
    engine: wikipedia
    shortcut: wp
    base_url: 'https://{language}.wikipedia.org/'
    number_of_results: 10
    disabled: false
    
  # Desenvolvimento
  - name: github
    engine: github
    shortcut: gh
    disabled: false
    
  - name: stackoverflow
    engine: stackoverflow
    shortcut: so
    disabled: false
    
  # Redes sociais
  - name: reddit
    engine: reddit
    shortcut: re
    page_size: 25
    disabled: false
    
  # V√≠deos
  - name: youtube
    engine: youtube_noapi
    shortcut: yt
    disabled: false

# Configura√ß√µes de categorias
categories_as_tabs:
  general:
    - google
    - bing
    - duckduckgo
    - startpage
  
  images:
    - google images
  
  videos:
    - youtube
  
  news:
    - google news
  
  social:
    - reddit
  
  it:
    - github
    - stackoverflow

# Localiza√ß√£o
locales:
  pt: Portugu√™s
  pt-BR: Portugu√™s (Brasil)
  en: English

# Configura√ß√µes de sa√≠da
outgoing:
  request_timeout: 10.0
  max_request_timeout: 60.0
  pool_connections: 100
  pool_maxsize: 20
  enable_http2: true
EOF

echo "‚úÖ Configura√ß√£o do SearxNG criada"

# Verificar se os arquivos de configura√ß√£o existem
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå Arquivo docker-compose.yml n√£o encontrado!"
    echo "Certifique-se de que todos os arquivos est√£o no diret√≥rio correto."
    exit 1
fi

# Tornar scripts execut√°veis
chmod +x *.sh 2>/dev/null || true

# Criar network se n√£o existir
docker network create ai-network 2>/dev/null || true

# Baixar imagens Docker
echo "‚¨áÔ∏è  Baixando imagens Docker..."
echo "Isso pode demorar alguns minutos na primeira vez..."
docker-compose pull

# Configurar permiss√µes finais
echo "üîß Configurando permiss√µes finais..."
sudo chown -R $USER:$USER data/ 2>/dev/null || true
sudo chown -R 977:977 searxng/ 2>/dev/null || {
    echo "‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel definir permiss√µes do SearxNG. Pode ser necess√°rio executar com sudo"
}

# Iniciar servi√ßos
echo "‚ñ∂Ô∏è  Iniciando servi√ßos pela primeira vez..."
docker-compose up -d

# Aguardar servi√ßos iniciarem
echo "‚è≥ Aguardando servi√ßos iniciarem (30 segundos)..."
sleep 30

# Verificar status dos servi√ßos
echo ""
echo "üìä Verificando status dos servi√ßos..."

services_ok=0
total_services=4

# Teste Open Web UI
echo "üåê Testando Open Web UI..."
if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200\|302"; then
    echo "  ‚úÖ Open Web UI: OK (http://localhost:3000)"
    ((services_ok++))
else
    echo "  ‚ùå Open Web UI: N√£o responde"
fi

# Teste SearxNG
echo "üîç Testando SearxNG..."
if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 | grep -q "200"; then
    echo "  ‚úÖ SearxNG: OK (http://localhost:8080)"
    ((services_ok++))
    
    # Teste de busca
    if curl -s "http://localhost:8080/search?q=test&format=json" | grep -q "results"; then
        echo "  ‚úÖ SearxNG: Busca funcionando"
    else
        echo "  ‚ö†Ô∏è  SearxNG: Interface OK mas busca pode ter problemas"
    fi
else
    echo "  ‚ùå SearxNG: N√£o responde"
fi

# Teste Ollama
echo "üß† Testando Ollama..."
if curl -s http://localhost:11434/api/tags &>/dev/null; then
    echo "  ‚úÖ Ollama API: OK (http://localhost:11434)"
    ((services_ok++))
else
    echo "  ‚ùå Ollama API: N√£o responde"
fi

# Teste Redis
echo "üíæ Testando Redis..."
if docker exec redis redis-cli ping 2>/dev/null | grep -q "PONG"; then
    echo "  ‚úÖ Redis: OK"
    ((services_ok++))
else
    echo "  ‚ùå Redis: N√£o responde"
fi

echo ""
echo "=============================================="

if [ $services_ok -eq $total_services ]; then
    echo "üéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!"
    echo "Todos os $total_services servi√ßos est√£o funcionando!"
else
    echo "‚ö†Ô∏è  CONFIGURA√á√ÉO CONCLU√çDA COM AVISOS"
    echo "$services_ok de $total_services servi√ßos est√£o funcionando"
    echo "Alguns servi√ßos podem ainda estar iniciando..."
fi

echo ""
echo "üåê URLS DE ACESSO:"
echo "‚Ä¢ Open Web UI: http://localhost:3000"
echo "‚Ä¢ SearxNG: http://localhost:8080" 
echo "‚Ä¢ Ollama API: http://localhost:11434"
echo ""

echo "üß† PR√ìXIMOS PASSOS - INSTALAR MODELOS:"
echo ""
echo "1. Modelo pequeno e r√°pido (1.3GB):"
echo "   docker exec -it ollama ollama pull llama3.2:1b"
echo ""
echo "2. Modelo m√©dio e balanceado (2GB):"
echo "   docker exec -it ollama ollama pull llama3.2:3b"
echo ""
echo "3. Modelo otimizado para portugu√™s (4GB):"
echo "   docker exec -it ollama ollama pull sabia-2:7b"
echo ""

echo "üìã COMANDOS √öTEIS:"
echo "‚Ä¢ Ver status: docker-compose ps"
echo "‚Ä¢ Ver logs: docker-compose logs -f"
echo "‚Ä¢ Parar tudo: docker-compose down"
echo "‚Ä¢ Reiniciar: docker-compose restart"
echo "‚Ä¢ Gerenciar: ./manage.sh help"
echo ""

echo "üîß EM CASO DE PROBLEMAS:"
echo "‚Ä¢ Diagn√≥stico: ./diagnostics.sh"
echo "‚Ä¢ Logs espec√≠ficos: docker-compose logs [servi√ßo]"
echo "‚Ä¢ Reiniciar servi√ßo: docker-compose restart [servi√ßo]"
echo "‚Ä¢ Backup: ./backup.sh"
echo "‚Ä¢ Restaurar: ./restore.sh [arquivo]"
echo ""

echo "üí° DICAS DE USO:"
echo "‚Ä¢ Primeiro acesso ao Open Web UI: crie uma conta de administrador"
echo "‚Ä¢ Configure o SearxNG como mecanismo de busca padr√£o"
echo "‚Ä¢ Use modelos menores para testes e maiores para produ√ß√£o"
echo "‚Ä¢ Monitore o uso de recursos com: docker stats"
echo ""

echo "üåü RECURSOS AVAN√áADOS:"
echo "‚Ä¢ Integra√ß√£o autom√°tica SearxNG + Open Web UI"
echo "‚Ä¢ Backup autom√°tico dos dados"
echo "‚Ä¢ Monitoramento de sa√∫de dos servi√ßos"
echo "‚Ä¢ Logs centralizados e rotativos"
echo "‚Ä¢ Configura√ß√£o otimizada para performance"
echo ""

# Criar arquivo de primeiros passos
echo "üìù Criando guia de primeiros passos..."
cat > PRIMEIROS_PASSOS.md << 'EOF'
# üöÄ Primeiros Passos - AutomaLLama

## 1. Primeiro Acesso

### Open Web UI (Interface Principal)
- Acesse: http://localhost:3000
- Na primeira vez, crie uma conta de administrador
- Esta ser√° sua interface principal para conversar com os modelos

### SearxNG (Busca Privada)
- Acesse: http://localhost:8080
- Teste uma busca para verificar funcionamento
- J√° est√° integrado automaticamente com o Open Web UI

## 2. Instalar Modelos de IA

### Modelos Recomendados (ordem de instala√ß√£o):

```bash
# 1. Modelo pequeno para testes (1.3GB)
docker exec -it ollama ollama pull llama3.2:1b

# 2. Modelo balanceado (2GB)
docker exec -it ollama ollama pull llama3.2:3b

# 3. Modelo em portugu√™s (4GB)
docker exec -it ollama ollama pull sabia-2:7b

# 4. Modelo avan√ßado (opcional - 4.7GB)
docker exec -it ollama ollama pull llama3.2:7b
```

### Verificar modelos instalados:
```bash
docker exec -it ollama ollama list
```

## 3. Configurar Integra√ß√£o com Busca

1. No Open Web UI, v√° em Settings (Configura√ß√µes)
2. Procure por "Web Search" ou "Busca Web"
3. Configure a URL: `http://searxng:8080`
4. Teste fazendo uma pergunta que precise de informa√ß√µes atuais

## 4. Comandos Essenciais

```bash
# Ver status de todos os servi√ßos
docker-compose ps

# Ver logs em tempo real
docker-compose logs -f

# Ver logs de um servi√ßo espec√≠fico
docker-compose logs -f webui
docker-compose logs -f ollama
docker-compose logs -f searxng

# Parar todos os servi√ßos
docker-compose down

# Iniciar todos os servi√ßos
docker-compose up -d

# Reiniciar um servi√ßo espec√≠fico
docker-compose restart webui

# Ver uso de recursos
docker stats
```

## 5. Solu√ß√£o de Problemas Comuns

### Servi√ßo n√£o responde:
```bash
# Verificar logs
docker-compose logs [nome-do-servi√ßo]

# Reiniciar servi√ßo
docker-compose restart [nome-do-servi√ßo]

# Diagn√≥stico completo
./diagnostics.sh
```

### Falta de espa√ßo em disco:
```bash
# Limpar containers parados
docker system prune

# Limpar imagens n√£o utilizadas
docker image prune

# Ver uso de espa√ßo
docker system df
```

### Performance lenta:
- Use modelos menores (1b, 3b) para testes
- Monitore uso de RAM: `htop` ou `docker stats`
- Considere aumentar swap se necess√°rio

## 6. Backup e Restaura√ß√£o

```bash
# Fazer backup
./backup.sh

# Restaurar backup
./restore.sh backup-YYYY-MM-DD.tar.gz

# Backups ficam em: ./backups/
```

## 7. Atualiza√ß√£o

```bash
# Parar servi√ßos
docker-compose down

# Atualizar imagens
docker-compose pull

# Iniciar com novas vers√µes
docker-compose up -d
```

## 8. URLs Importantes

- **Open Web UI**: http://localhost:3000
- **SearxNG**: http://localhost:8080
- **Ollama API**: http://localhost:11434
- **Health Check**: http://localhost:3000/health

## 9. Arquivos de Configura√ß√£o

- `.env` - Vari√°veis de ambiente
- `docker-compose.yml` - Configura√ß√£o dos servi√ßos
- `searxng/settings.yml` - Configura√ß√£o do SearxNG
- `data/` - Dados persistentes

## 10. Suporte

- Logs: `docker-compose logs`
- Diagn√≥stico: `./diagnostics.sh`
- Monitoramento: `./monitor.sh`
- Documenta√ß√£o: README.md
EOF

# Verificar se o usu√°rio est√° no grupo docker
if ! groups $USER | grep -q docker; then
    echo ""
    echo "‚ö†Ô∏è  IMPORTANTE: REINICIALIZA√á√ÉO NECESS√ÅRIA"
    echo "============================================"
    echo "O usu√°rio foi adicionado ao grupo 'docker', mas as mudan√ßas"
    echo "s√≥ ter√£o efeito ap√≥s logout/login ou reinicializa√ß√£o."
    echo ""
    echo "Para aplicar as mudan√ßas sem reiniciar:"
    echo "1. Execute: newgrp docker"
    echo "2. Ou fa√ßa logout e login novamente"
    echo "3. Ou reinicie o sistema"
    echo ""
    echo "Depois disso, voc√™ poder√° usar docker sem 'sudo'"
fi

# Verificar se h√° atualiza√ß√µes de sistema pendentes
echo ""
echo "üîÑ Verificando atualiza√ß√µes do sistema..."
updates=$(apt list --upgradable 2>/dev/null | wc -l)
if [ $updates -gt 1 ]; then
    echo "‚ö†Ô∏è  H√° $((updates-1)) atualiza√ß√µes dispon√≠veis para o sistema"
    echo "Recomendamos executar: sudo apt update && sudo apt upgrade"
fi

# Status final detalhado
echo ""
echo "üìä RESUMO FINAL DA INSTALA√á√ÉO"
echo "=============================================="
echo "Data/Hora: $(date)"
echo "Sistema: $(lsb_release -d | cut -f2)"
echo "Docker: $(docker --version | cut -d' ' -f3 | cut -d',' -f1)"
echo "Docker Compose: $(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)"
echo "Usu√°rio: $USER"
echo "Diret√≥rio: $(pwd)"
echo ""

# Informa√ß√µes de sistema
echo "üíª RECURSOS DO SISTEMA:"
echo "CPU: $(nproc) cores"
echo "RAM: $(free -h | awk '/^Mem:/ {print $2}') total"
echo "Disco: $(df -h . | awk 'NR==2 {print $4}') dispon√≠vel"
echo ""

# Portas utilizadas
echo "üîå PORTAS UTILIZADAS:"
echo "‚Ä¢ 3000 - Open Web UI"
echo "‚Ä¢ 8080 - SearxNG" 
echo "‚Ä¢ 11434 - Ollama API"
echo "‚Ä¢ 6379 - Redis (interno)"
echo ""

# Criar script de verifica√ß√£o r√°pida
cat > quick-check.sh << 'EOF'
#!/bin/bash
echo "üîç Verifica√ß√£o R√°pida dos Servi√ßos"
echo "================================="

services=("webui:3000" "searxng:8080" "ollama:11434")
all_ok=true

for service in "${services[@]}"; do
    name=$(echo $service | cut -d':' -f1)
    port=$(echo $service | cut -d':' -f2)
    
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:$port | grep -q "200\|302"; then
        echo "‚úÖ $name (porta $port): OK"
    else
        echo "‚ùå $name (porta $port): FALHOU"
        all_ok=false
    fi
done

if $all_ok; then
    echo "üéâ Todos os servi√ßos est√£o funcionando!"
else
    echo "‚ö†Ô∏è  Alguns servi√ßos t√™m problemas. Execute: docker-compose logs"
fi
EOF

chmod +x quick-check.sh

# Script de primeiro modelo
cat > install-first-model.sh << 'EOF'
#!/bin/bash
echo "üß† Instalando primeiro modelo recomendado..."
echo "==========================================="
echo ""
echo "Instalando llama3.2:1b (modelo pequeno e r√°pido - 1.3GB)"
echo "Este √© ideal para testes e conversas b√°sicas."
echo ""
echo "‚è≥ Aguarde, isso pode demorar alguns minutos..."

if docker exec -it ollama ollama pull llama3.2:1b; then
    echo ""
    echo "‚úÖ Modelo instalado com sucesso!"
    echo ""
    echo "üéØ Pr√≥ximos passos:"
    echo "1. Acesse: http://localhost:3000"
    echo "2. Fa√ßa login ou crie uma conta"
    echo "3. Selecione o modelo 'llama3.2:1b'"
    echo "4. Comece a conversar!"
    echo ""
    echo "üí° Para instalar mais modelos:"
    echo "   docker exec -it ollama ollama pull llama3.2:3b"
    echo "   docker exec -it ollama ollama pull sabia-2:7b"
else
    echo "‚ùå Erro ao instalar o modelo. Verifique:"
    echo "‚Ä¢ Se o Ollama est√° rodando: docker-compose ps"
    echo "‚Ä¢ Se h√° espa√ßo em disco suficiente: df -h"
    echo "‚Ä¢ Os logs: docker-compose logs ollama"
fi
EOF

chmod +x install-first-model.sh

echo ""
echo "üéØ INSTALA√á√ÉO CONCLU√çDA!"
echo "=============================================="
echo ""
echo "‚ú® Scripts adicionais criados:"
echo "‚Ä¢ quick-check.sh - Verifica√ß√£o r√°pida dos servi√ßos"
echo "‚Ä¢ install-first-model.sh - Instala o primeiro modelo"
echo "‚Ä¢ PRIMEIROS_PASSOS.md - Guia completo"
echo ""
echo "üöÄ PR√ìXIMO PASSO RECOMENDADO:"
echo "Execute: ./install-first-model.sh"
echo ""
echo "üåü Sua instala√ß√£o AutomaLLama est√° pronta!"
echo "Acesse http://localhost:3000 para come√ßar a usar."
echo ""
echo "üìö Para mais informa√ß√µes, leia: PRIMEIROS_PASSOS.md"
echo "=============================================="
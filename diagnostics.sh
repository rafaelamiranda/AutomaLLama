#!/bin/bash

# Script de diagn√≥stico para Open Web UI + Ollama + SearxNG
# Verifica o status e configura√ß√£o de todos os servi√ßos

echo "üîç Diagn√≥stico do AutomaLLama"
echo "=========================================="
echo "Data: $(date)"
echo ""

# Informa√ß√µes do sistema
echo "üíª INFORMA√á√ïES DO SISTEMA:"
echo "OS: $(lsb_release -d | cut -f2)"
echo "Kernel: $(uname -r)"
echo "Arquitetura: $(uname -m)"
echo "RAM Total: $(free -h | grep Mem | awk '{print $2}')"
echo "RAM Dispon√≠vel: $(free -h | grep Mem | awk '{print $7}')"
echo "Espa√ßo em Disco: $(df -h . | tail -1 | awk '{print $4}')"
echo ""

# Verificar Docker
echo "üê≥ DOCKER:"
if command -v docker &> /dev/null; then
    echo "‚úÖ Docker instalado: $(docker --version)"
    echo "‚úÖ Docker rodando: $(sudo systemctl is-active docker)"
else
    echo "‚ùå Docker n√£o encontrado"
fi

if command -v docker-compose &> /dev/null; then
    echo "‚úÖ Docker Compose: $(docker-compose --version)"
else
    echo "‚ùå Docker Compose n√£o encontrado"
fi
echo ""

# Verificar arquivos de configura√ß√£o
echo "üìÅ ARQUIVOS DE CONFIGURA√á√ÉO:"
files=("docker-compose.yml" ".env" "searxng/settings.yml")
for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file existe"
    else
        echo "‚ùå $file n√£o encontrado"
    fi
done
echo ""

# Status dos containers
echo "üì¶ STATUS DOS CONTAINERS:"
if docker-compose ps &>/dev/null; then
    docker-compose ps
else
    echo "‚ùå N√£o foi poss√≠vel verificar containers"
fi
echo ""

# Verificar portas
echo "üåê PORTAS:"
ports=(3000 8080 11434 6379)
for port in "${ports[@]}"; do
    if netstat -tlnp 2>/dev/null | grep -q ":$port "; then
        echo "‚úÖ Porta $port est√° em uso"
    else
        echo "‚ùå Porta $port n√£o est√° em uso"
    fi
done
echo ""

# Testar conectividade
echo "üîó TESTES DE CONECTIVIDADE:"

# Teste Open Web UI
if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200\|302"; then
    echo "‚úÖ Open Web UI responde (http://localhost:3000)"
else
    echo "‚ùå Open Web UI n√£o responde"
fi

# Teste SearxNG
if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 | grep -q "200"; then
    echo "‚úÖ SearxNG responde (http://localhost:8080)"
else
    echo "‚ùå SearxNG n√£o responde"
fi

# Teste Ollama
if curl -s http://localhost:11434/api/tags &>/dev/null; then
    echo "‚úÖ Ollama API responde (http://localhost:11434)"
else
    echo "‚ùå Ollama API n√£o responde"
fi

# Teste Redis
if docker exec redis redis-cli ping 2>/dev/null | grep -q "PONG"; then
    echo "‚úÖ Redis responde"
else
    echo "‚ùå Redis n√£o responde"
fi
echo ""

# Modelos do Ollama
echo "üß† MODELOS OLLAMA:"
if docker exec ollama ollama list 2>/dev/null; then
    echo ""
else
    echo "‚ùå N√£o foi poss√≠vel listar modelos"
fi

# Uso de recursos
echo "üìä USO DE RECURSOS:"
if docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" 2>/dev/null; then
    echo ""
else
    echo "‚ùå N√£o foi poss√≠vel verificar uso de recursos"
fi

# Logs recentes de erro
echo "üìù LOGS RECENTES (ERROS):"
echo "√öltimas 10 linhas com erro:"
docker-compose logs --tail=50 2>/dev/null | grep -i error | tail -10 || echo "Nenhum erro encontrado nos logs recentes"
echo ""

# Espa√ßo em disco detalhado
echo "üíæ ESPA√áO EM DISCO:"
echo "Dados dos containers:"
du -sh data/* 2>/dev/null || echo "Diret√≥rio data/ n√£o encontrado"
echo ""
echo "Imagens Docker:"
docker system df 2>/dev/null || echo "N√£o foi poss√≠vel verificar uso do Docker"
echo ""

# Configura√ß√µes de rede
echo "üåê CONFIGURA√á√ÉO DE REDE:"
echo "Redes Docker:"
docker network ls | grep ai-network || echo "Rede ai-network n√£o encontrada"
echo ""

# Teste de busca no SearxNG
echo "üîç TESTE DE BUSCA:"
if curl -s "http://localhost:8080/search?q=test&format=json" | grep -q "results"; then
    echo "‚úÖ SearxNG consegue fazer buscas"
else
    echo "‚ùå SearxNG n√£o consegue fazer buscas"
fi
echo ""

# Recomenda√ß√µes
echo "üí° RECOMENDA√á√ïES:"
echo ""

# Verificar RAM
total_ram=$(free -m | grep Mem | awk '{print $2}')
if [ "$total_ram" -lt 4096 ]; then
    echo "‚ö†Ô∏è  RAM baixa ($total_ram MB). Recomendado: 8GB+ para melhor performance"
fi

# Verificar espa√ßo
available_space=$(df . | tail -1 | awk '{print $4}')
if [ "$available_space" -lt 10485760 ]; then  # 10GB em KB
    echo "‚ö†Ô∏è  Pouco espa√ßo em disco. Recomendado: 20GB+ livres"
fi

# Verificar se containers est√£o rodando
running_containers=$(docker-compose ps | grep "Up" | wc -l)
if [ "$running_containers" -lt 4 ]; then
    echo "‚ö†Ô∏è  Nem todos os containers est√£o rodando. Execute: docker-compose up -d"
fi

echo ""
echo "üîß COMANDOS √öTEIS PARA SOLU√á√ÉO DE PROBLEMAS:"
echo ""
echo "Reiniciar todos os servi√ßos:"
echo "  docker-compose restart"
echo ""
echo "Ver logs em tempo real:"
echo "  docker-compose logs -f"
echo ""
echo "Reconstruir containers:"
echo "  docker-compose down && docker-compose up -d --build"
echo ""
echo "Limpar cache do Docker:"
echo "  docker system prune -f"
echo ""
echo "=========================================="
echo "Diagn√≥stico conclu√≠do!"